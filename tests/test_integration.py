#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Bitcoin RPC –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º unittest
"""

import asyncio
import logging
import sys
import unittest
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
try:
    from app.config import settings
    from app.database import get_db
    from app.services.bitcoin_rpc import bitcoin_rpc
    from app.services.block_service import get_block_service
    from app.services.sync_service import get_sync_service
    from app.services.transaction_service import get_transaction_service
except ImportError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)


class BitcoinRPCIntegrationTest(unittest.TestCase):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã Bitcoin RPC"""

    @classmethod
    def setUpClass(cls):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ —Ç–µ—Å—Ç–∞–º–∏"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Bitcoin RPC")
        logger.info("=" * 60)
        cls.start_time = datetime.now()

    @classmethod
    def tearDownClass(cls):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        duration = datetime.now() - cls.start_time
        logger.info("\n" + "=" * 60)
        logger.info("üìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        logger.info(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration.total_seconds():.1f}—Å")
        logger.info("=" * 60)

    def setUp(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.db = next(get_db())

    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        if hasattr(self, "db"):
            self.db.close()

    def test_01_configuration(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        logger.info("\n‚öôÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        logger.info("-" * 40)

        logger.info("üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
        logger.info(f"   ‚Ä¢ –ü—Ä–æ–µ–∫—Ç: {settings.PROJECT_NAME}")
        logger.info(f"   ‚Ä¢ –í–µ—Ä—Å–∏—è: {settings.VERSION}")
        logger.info(
            f"   ‚Ä¢ Bitcoin RPC: {settings.BITCOIN_RPC_HOST}:"
            f"{settings.BITCOIN_RPC_PORT}"
        )
        logger.info(f"   ‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {settings.DATABASE_URL}")
        logger.info(f"   ‚Ä¢ Timeout RPC: {settings.BITCOIN_RPC_TIMEOUT}—Å")
        logger.info(
            f"   ‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: "
            f"{'–≤–∫–ª—é—á–µ–Ω–∞' if settings.SYNC_ENABLED else '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}"
        )
        logger.info(f"   ‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {settings.SYNC_INTERVAL}—Å")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.assertIsNotNone(settings.PROJECT_NAME)
        self.assertIsNotNone(settings.VERSION)
        self.assertIsNotNone(settings.BITCOIN_RPC_HOST)
        self.assertIsNotNone(settings.BITCOIN_RPC_PORT)
        self.assertIsNotNone(settings.DATABASE_URL)

        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –ü–†–û–ô–î–ï–ù")

    def test_02_bitcoin_rpc(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Bitcoin RPC –∫–ª–∏–µ–Ω—Ç–∞"""
        logger.info("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Bitcoin RPC –∫–ª–∏–µ–Ω—Ç–∞...")
        logger.info("-" * 40)

        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        is_connected = loop.run_until_complete(bitcoin_rpc.test_connection())
        loop.close()

        self.assertTrue(is_connected, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Bitcoin Core")
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bitcoin Core —É—Å–ø–µ—à–Ω–æ")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        blockchain_info = bitcoin_rpc.get_blockchain_info()
        self.assertIsNotNone(blockchain_info)
        self.assertIn("chain", blockchain_info)
        self.assertIn("blocks", blockchain_info)

        logger.info("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫—á–µ–π–Ω–µ:")
        logger.info(f"   ‚Ä¢ –°–µ—Ç—å: {blockchain_info.get('chain', 'unknown')}")
        logger.info(f"   ‚Ä¢ –ë–ª–æ–∫–æ–≤: {blockchain_info.get('blocks', 0)}")
        logger.info(f"   ‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {blockchain_info.get('difficulty', 0)}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –±–ª–æ–∫–µ
        best_hash = bitcoin_rpc.get_best_block_hash()
        block_count = bitcoin_rpc.get_block_count()
        self.assertIsNotNone(best_hash)
        self.assertGreaterEqual(block_count, 0)

        logger.info(f"üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫: #{block_count} ({best_hash[:16]}...)")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ–º–ø—É–ª–µ
        mempool_info = bitcoin_rpc.get_mempool_info()
        self.assertIsNotNone(mempool_info)
        self.assertIn("size", mempool_info)

        logger.info(f"üîÑ –ú–µ–º–ø—É–ª: {mempool_info.get('size', 0)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        logger.info("‚úÖ Bitcoin RPC: –ü–†–û–ô–î–ï–ù")

    def test_03_block_service(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –±–ª–æ–∫–æ–≤"""
        logger.info("\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –±–ª–æ–∫–æ–≤...")
        logger.info("-" * 40)

        block_service = get_block_service(self.db)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª–æ–∫—á–µ–π–Ω–µ
        blockchain_info = block_service.get_blockchain_info()
        self.assertIsNotNone(blockchain_info)
        self.assertIn("blocks", blockchain_info)
        self.assertIn("db_height", blockchain_info)

        logger.info(f"üìä –í—ã—Å–æ—Ç–∞ —Å–µ—Ç–∏: {blockchain_info.get('blocks', 0)}")
        logger.info(f"üìä –í—ã—Å–æ—Ç–∞ –ë–î: {blockchain_info.get('db_height', 0)}")
        logger.info(
            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {blockchain_info.get('sync_progress', 0):.1f}%"
        )

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –±–ª–æ–∫–æ–≤ –∏–∑ –ë–î
        latest_blocks = block_service.get_latest_blocks(limit=3)
        self.assertIsNotNone(latest_blocks)
        self.assertIsInstance(latest_blocks, list)

        logger.info(f"üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –±–ª–æ–∫–∏ –≤ –ë–î: {len(latest_blocks)}")

        for block in latest_blocks:
            logger.info(
                f"   ‚Ä¢ –ë–ª–æ–∫ #{block.height}: {block.hash[:16]}... ({block.n_tx} —Çx)"
            )

        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫–∞ —á–µ—Ä–µ–∑ RPC
        try:
            latest_height = bitcoin_rpc.get_block_count()
            test_block = block_service.get_or_fetch_block(latest_height)
            self.assertIsNotNone(test_block)
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –±–ª–æ–∫ #{test_block.height}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –±–ª–æ–∫: {e}")

        logger.info("‚úÖ –°–µ—Ä–≤–∏—Å –±–ª–æ–∫–æ–≤: –ü–†–û–ô–î–ï–ù")

    def test_04_transaction_service(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        logger.info("\nüí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")
        logger.info("-" * 40)

        tx_service = get_transaction_service(self.db)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        latest_txs_result = loop.run_until_complete(
            tx_service.get_latest_transactions(limit=3)
        )
        loop.close()

        # –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (transactions, total)
        latest_txs, total = latest_txs_result
        self.assertIsNotNone(latest_txs)
        self.assertIsInstance(latest_txs, list)

        logger.info(f"üí∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ë–î: {len(latest_txs)}")

        for tx in latest_txs:
            logger.info(f"   ‚Ä¢ {tx.txid[:16]}... (–±–ª–æ–∫ #{tx.block_height})")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        tx_count = tx_service.get_transaction_count()
        self.assertIsNotNone(tx_count)
        self.assertGreaterEqual(tx_count, 0)

        logger.info(f"üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –ë–î: {tx_count}")

        # –¢–µ—Å—Ç –º–µ–º–ø—É–ª–∞
        try:
            mempool_txs = tx_service.get_mempool_transactions()
            self.assertIsNotNone(mempool_txs)
            logger.info(f"üîÑ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –º–µ–º–ø—É–ª–µ: {len(mempool_txs)}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ–º–ø—É–ª: {e}")

        logger.info("‚úÖ –°–µ—Ä–≤–∏—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: –ü–†–û–ô–î–ï–ù")

    def test_05_sync_service(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        logger.info("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
        logger.info("-" * 40)

        sync_service = get_sync_service(self.db)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        status = sync_service.get_sync_status()
        self.assertIsNotNone(status)
        self.assertIn("is_syncing", status)
        self.assertIn("network_height", status)
        self.assertIn("db_height", status)

        logger.info("üìä –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:")
        logger.info(f"   ‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞: {status['is_syncing']}")
        logger.info(f"   ‚Ä¢ –í—ã—Å–æ—Ç–∞ —Å–µ—Ç–∏: {status['network_height']}")
        logger.info(f"   ‚Ä¢ –í—ã—Å–æ—Ç–∞ –ë–î: {status['db_height']}")
        logger.info(f"   ‚Ä¢ –û—Ç—Å—Ç–∞–µ—Ç –Ω–∞ –±–ª–æ–∫–æ–≤: {status['blocks_behind']}")
        logger.info(f"   ‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å: {status['sync_progress']}%")
        logger.info(f"   ‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {status['is_synced']}")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ë–î
        validation = sync_service.validate_database_integrity()
        self.assertIsNotNone(validation)
        self.assertIn("is_valid", validation)
        self.assertIn("checked_blocks", validation)

        logger.info("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –ë–î:")
        logger.info(f"   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –±–ª–æ–∫–æ–≤: {validation['checked_blocks']}")
        logger.info(f"   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {validation['checked_transactions']}")
        logger.info(f"   ‚Ä¢ –í–∞–ª–∏–¥–Ω–∞: {validation['is_valid']}")

        if validation["issues"]:
            logger.warning("‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
            for issue in validation["issues"][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                logger.warning(f"     - {issue}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        has_reorg = loop.run_until_complete(sync_service.check_for_reorg())
        loop.close()

        reorg_status = "–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞" if has_reorg else "–Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞"
        logger.info(f"üîÑ –†–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –±–ª–æ–∫—á–µ–π–Ω–∞: {reorg_status}")

        # –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–ª–æ–∫–æ–≤
        if status["blocks_behind"] > 0 and status["blocks_behind"] <= 5:
            logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–ª–æ–∫–æ–≤...")
            try:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                sync_result = loop.run_until_complete(
                    sync_service.sync_latest_blocks(max_blocks=3)
                )
                loop.close()

                self.assertIsNotNone(sync_result)
                self.assertIn("synced_blocks", sync_result)

                logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:")
                logger.info(f"   ‚Ä¢ –ë–ª–æ–∫–æ–≤: {sync_result['synced_blocks']}")
                logger.info(f"   ‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {sync_result['synced_transactions']}")
                logger.info(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {sync_result['errors']}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–ª–æ–∫–∏: {e}")
        else:
            logger.info(
                "‚ÑπÔ∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ "
                "(—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±–ª–æ–∫–æ–≤ –∏–ª–∏ —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)"
            )

        logger.info("‚úÖ –°–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: –ü–†–û–ô–î–ï–ù")


def suite():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤"""
    test_suite = unittest.TestSuite()
    test_suite.addTest(unittest.makeSuite(BitcoinRPCIntegrationTest))
    return test_suite


if __name__ == "__main__":
    try:
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
        runner = unittest.TextTestRunner(verbosity=2)
        result = runner.run(suite())

        # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        logger.info("\n" + "=" * 60)
        logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        logger.info("=" * 60)

        total_tests = result.testsRun
        failures = len(result.failures)
        errors = len(result.errors)
        tests_passed = total_tests - failures - errors
        success_rate = (tests_passed / total_tests * 100) if total_tests > 0 else 0

        logger.info(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {tests_passed}/{total_tests}")
        logger.info(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failures}")
        logger.info(f"üí• –û—à–∏–±–æ–∫: {errors}")
        logger.info(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")

        if result.wasSuccessful():
            logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            logger.info("üöÄ Bitcoin RPC –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        else:
            logger.warning("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
            logger.warning("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Bitcoin Core –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")

        logger.info("=" * 60)

        # –í–æ–∑–≤—Ä–∞—Ç –∫–æ–¥–∞ –≤—ã—Ö–æ–¥–∞
        sys.exit(0 if result.wasSuccessful() else 1)

    except KeyboardInterrupt:
        logger.info("\nüõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
